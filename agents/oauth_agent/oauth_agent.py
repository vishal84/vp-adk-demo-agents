# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from adk.core import agent_context_manager
from adk.llm import LlmAgent
from adk.pb.adk_pb2 import *


class MyCustomAgent(LlmAgent):
    """
    A custom agent demonstrating the standard structure for an agent that uses
    an LLM. It inherits from LlmAgent, which provides the core functionality
    for interacting with language models and itself inherits from BaseAgent.
    """

    def __init__(self, agent_context):
        """
        Initializes the agent.

        This is the ideal place to:
        1. Define and initialize any tools (e.g., OpenAPIToolset).
        2. Configure authentication schemes (e.g., OAuth2).
        3. Set up any other resources your agent needs.
        """
        # The `LlmAgent` constructor handles the core setup.
        # You can pass tools and other configurations here.
        super().__init__(agent_context, tools=[])
        print("MyCustomAgent initialized.")

    def adk_agent_type(self) -> AgentType:
        """
        Required method from BaseAgent.
        Returns the type of the ADK agent, indicating it's an LLM agent.
        """
        return AgentType.ADK_AGENT_TYPE_LLM

    def pre_call_hook(self, llm_request: LlmRequest) -> LlmRequest:
        """
        A hook executed immediately before the request is sent to the LLM.

        Use this method to modify the request:
        - Add or modify a system prompt to guide the LLM's behavior.
        - Inject few-shot examples into the conversation history.
        - Format or sanitize the user's query.
        - Add context from external sources.
        """
        print("Executing pre-call hook...")

        # Example: Add a system prompt if one doesn't already exist.
        # This guides the LLM on its persona and task.
        if not llm_request.prompt.turns or llm_request.prompt.turns[0].role != Role.ROLE_SYSTEM:
            llm_request.prompt.turns.insert(
                0,
                Turn(
                    role=Role.ROLE_SYSTEM,
                    content="You are a helpful and friendly assistant. Your primary goal is to assist users with their tasks accurately."
                ),
            )
        return llm_request

    def post_call_hook(self, llm_response: LlmResponse) -> LlmResponse:
        """
        A hook executed immediately after the response is received from the LLM.

        Use this method to process or validate the LLM's output:
        - Format the response for better readability.
        - Validate the output against a schema or business rules.
        - Check for and handle inappropriate or sensitive content.
        - Extract structured data from a natural language response.
        """
        print("Executing post-call hook...")

        # Example: Append a standard disclaimer to every LLM response.
        if llm_response.turns:
            # The last turn is typically the model's output.
            llm_response.turns[-1].content += "\n\n*This response was generated by an AI assistant.*"

        return llm_response

def main():
    """Main entry point for running the agent."""
    # The AgentContextManager handles the lifecycle and communication
    # with the ADK runtime environment.
    with agent_context_manager.AgentContextManager() as agent_context:
        # Instantiate and run your agent. The run() method starts the
        # agent's listening loop.
        MyCustomAgent(agent_context).run()

if __name__ == "__main__":
    # This block ensures the agent starts when the script is executed directly.
    main()

